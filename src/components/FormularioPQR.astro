---
import ButtonRef from "./ButtonRef.astro";

---
  <form id="formPqr" class="p-7 border-l-2" >
    <h2
    class="text-center font-semibold"
  >
    Cuéntanos cómo fue la experiencia con nuestro servicio
  </h2>
		<div class="mt-10 grid grid-cols-1 gap-x-6 gap-y-8 sm:grid-cols-6 mb-4">
		  <div class="sm:col-span-3">
			<label for="first-name" class="block text-sm font-medium leading-6 text-gray-900">Nombre / Apellido</label>
			<div class="mt-2">
			  <input type="text" name="first-name" id="nombreInput" required placeholder="Introduzca su nombre" autocomplete="given-name" class="block w-full rounded-md border-0 p-2.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
			</div>
		  </div>
  
		  <div class="sm:col-span-3">
			<label for="last-name" class="block text-sm font-medium leading-6 text-gray-900">Teléfono </label>
			<div class="mt-2">
			  <input type="text" name="last-name"    type="tel"
              pattern="\+?\d{0,3}[\s\(\-]?([0-9]{2,3})[\s\)\-]?([\s\-]?)([0-9]{3})[\s\-]?([0-9]{2})[\s\-]?([0-9]{2})"
              placeholder="Ingrese su teléfono "
              id="telefonoInput"required autocomplete="family-name" class="block w-full rounded-md border-0 p-2.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
			</div>
		  </div>
		</div>
		<div class="mb-4">
			<label for="first-name" class="block text-sm font-medium leading-6 text-gray-900">Email</label>
			<div class="mt-2">
			  <input type="text" name="first-name"  id="emailInput" required placeholder="Introduzca su correo electronico" autocomplete="given-name" class="block w-full rounded-md border-0 p-2.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
			</div>
		</div>
		<div class="mb-4">
			<label for="first-name" class="block text-sm font-medium leading-6 text-gray-900">Sede</label>
			<div class="mt-2">
			  <input type="text" name="first-name"  id="sedeInput" placeholder="Parqueadero donde utilizó el servicio" autocomplete="given-name" class="block w-full rounded-md border-0 p-2.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6">
			</div>
		</div>
		<div class="col-span-full mb-4">
			<label for="about" class="block text-sm font-medium leading-6 text-gray-900">Mensaje</label>
			<div class="mt-2">
			  <textarea id="mensajeInput" name="about" rows="4"placeholder="Cuéntenos su experiencia" class="block w-full rounded-md border-0 p-2.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6"></textarea>
			</div>
			
		  </div>
        
          
          <div class="text-center ">
			<ButtonRef value='Enviar' type='submit' id="btnEnviar"/>
    </div>
  </form>


  <script>
import Swal from 'sweetalert2'
import axios from 'axios'
import { getUrl, alertEdit } from '@lib/helpers';

let formPqr = document.getElementById("formPqr") as HTMLFormElement
async function enviarSolicitud(newData: any) {
    try {
      Swal.fire({
                title: 'Cargando',
                text: "Espere un momento",
                confirmButtonText: 'Ok',
                icon: 'success',
                confirmButtonColor: '#314c53',
            });
            
        const url = getUrl('solicitud-pqr/create')
     
        // Realiza la solicitud POST con axios
        const response = await axios.post(url, newData, {
            headers: {
                'Content-Type': 'application/json',
                'Accept': '*/*'
            },
        });

        if (response.data.estado) {
            formPqr.reset();
            alertEdit({title:"", text:response.data.msg})
            return;
        }

    
        alertEdit({title:"Error", text:response.data.msg, icon: 'warning'})
        return
    } catch (error) {
        console.error("Axios error:", error);
        alertEdit({title:"Error", text:"Hubo un problema con la solicitud. Por favor, intenta nuevamente.", icon: 'error'})
    }
}
const inputs = {
    nombre: document.getElementById('nombreInput') as HTMLInputElement,
    telefono: document.getElementById('telefonoInput') as HTMLInputElement,
    email: document.getElementById('emailInput') as HTMLInputElement,
    mensaje: document.getElementById('mensajeInput') as HTMLInputElement,
    sede: document.getElementById('sedeInput') as HTMLInputElement,
}


   formPqr?.addEventListener("submit", async(e:Event)=>{
    e.preventDefault()
    if(inputs.mensaje.value.length >= 700){
        return Swal.fire({
            title: '',
            text: 'Este mensaje tiene un lÃ­mite mÃ¡ximo de 700 caracteres. Por favor, asegÃºrate que no exceda este lÃ­mite. Gracias.',
            confirmButtonText: 'Ok',
            icon: 'warning',
            confirmButtonColor: '#314c53',
        })
    }
    const data = {
        NombreApellido: inputs.nombre.value,
        Sede:inputs.sede.value,
        Telefono: inputs.telefono.value,
        CorreoElectronico: inputs.email.value, 
        Mensaje: inputs.mensaje.value,
    }
  

   return await enviarSolicitud(data)
   })
  </script>

